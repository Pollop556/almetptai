# bot.py
import telebot
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM
import re
import csv
import os
from datetime import datetime
import logging

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================
BOT_TOKEN = "8450391232:AAGtconwAu_Lig4gre6k05NJgXWukh6NIHU"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
MODEL_PATH = "./my_rugpt3_finetuned"  # –ü—É—Ç—å –∫ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
SHABLON_FILE = "shablon.csv"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –∏–∑ CSV
def load_shablons():
    shablons = {}
    try:
        with open(SHABLON_FILE, 'r', encoding='utf-8') as file:
            reader = csv.reader(file)
            for row in reader:
                if len(row) >= 2:
                    # –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                    key = row[0].strip().strip('"')
                    value = row[1].strip().strip('"')
                    shablons[key] = value
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(shablons)} —à–∞–±–ª–æ–Ω–æ–≤")
        return shablons
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤: {e}")
        return {}

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
def load_model():
    try:
        tokenizer = AutoTokenizer.from_pretrained(MODEL_PATH)
        model = AutoModelForCausalLM.from_pretrained(MODEL_PATH)
        
        if tokenizer.pad_token is None:
            tokenizer.pad_token = tokenizer.eos_token
            
        device = "cuda" if torch.cuda.is_available() else "cpu"
        model = model.to(device)
        
        logger.info(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")
        return tokenizer, model, device
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
        return None, None, None

# –§—É–Ω–∫—Ü–∏—è –∑–∞–º–µ–Ω—ã —à–∞–±–ª–æ–Ω–æ–≤
def replace_shablons(text, shablons):
    """–ó–∞–º–µ–Ω—è–µ—Ç —à–∞–±–ª–æ–Ω—ã –≤ —Ç–µ–∫—Å—Ç–µ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
    if not text:
        return text
    
    # –ò—â–µ–º –≤—Å–µ —à–∞–±–ª–æ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ [–Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞]
    pattern = r'\[(.*?)\]'
    matches = re.findall(pattern, text)
    
    if not matches:
        return text
    
    result = text
    for match in matches:
        template_key = f"[{match}]"
        if template_key in shablons:
            # –ó–∞–º–µ–Ω—è–µ–º —à–∞–±–ª–æ–Ω –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ
            result = result.replace(template_key, shablons[template_key])
        else:
            # –£–¥–∞–ª—è–µ–º —à–∞–±–ª–æ–Ω –µ—Å–ª–∏ –æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω
            result = result.replace(template_key, "").strip()
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤
    result = re.sub(r'\s+', ' ', result).strip()
    return result

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª—å—é
def generate_response(question, tokenizer, model, device, max_length=200):
    try:
        prompt = f"–í: {question}\n–û:"
        inputs = tokenizer(prompt, return_tensors="pt").to(device)
        
        with torch.no_grad():
            outputs = model.generate(
                inputs.input_ids,
                max_length=max_length,
                num_return_sequences=1,
                temperature=0.7,
                do_sample=True,
                pad_token_id=tokenizer.eos_token_id,
                repetition_penalty=1.2,
                early_stopping=True
            )
        
        generated_text = tokenizer.decode(outputs[0], skip_special_tokens=True)
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç (—á–∞—Å—Ç—å –ø–æ—Å–ª–µ "–û:")
        answer = generated_text[len(prompt):].strip()
        
        # –û–±—Ä–µ–∑–∞–µ–º –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        if len(answer) > 400:
            answer = answer[:400] + "..."
            
        return answer
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞."

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
SHABLONS = load_shablons()
TOKENIZER, MODEL, DEVICE = load_model()

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
usage_stats = {
    "total_requests": 0,
    "successful_responses": 0,
    "users": set()
}

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô ====================
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    welcome_text = """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç-–±–æ—Ç –ê–ª—å–º–µ—Ç—å–µ–≤—Å–∫–æ–≥–æ –ø–æ–ª–∏—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Ö–Ω–∏–∫—É–º–∞!

–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ:
‚Ä¢ –†–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –∑–∞–Ω—è—Ç–∏–π
‚Ä¢ –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
‚Ä¢ –û—Ç–¥–µ–ª–µ–Ω–∏—è—Ö –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è—Ö
‚Ä¢ IT-–ö—É–±–µ –∏ –∫—Ä—É–∂–∫–∞—Ö
‚Ä¢ –û–±—â–µ–∂–∏—Ç–∏–∏ –∏ —Å—Ç–∏–ø–µ–Ω–¥–∏—è—Ö
‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç–∞—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π

–ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: /stats
üÜò –ü–æ–º–æ—â—å: /help
    """
    bot.reply_to(message, welcome_text)
    logger.info(f"üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥")

@bot.message_handler(commands=['stats'])
def send_stats(message):
    stats_text = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {usage_stats['total_requests']}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {usage_stats['successful_responses']}
‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(usage_stats['users'])}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%H:%M:%S')}
    """
    bot.reply_to(message, stats_text)

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = message.from_user.id
    question = message.text.strip()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    usage_stats["total_requests"] += 1
    usage_stats["users"].add(user_id)
    
    logger.info(f"‚ùì –í–æ–ø—Ä–æ—Å –æ—Ç {user_id}: {question}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ª–∏ –º–æ–¥–µ–ª—å
    if TOKENIZER is None or MODEL is None:
        bot.reply_to(message, "‚ö†Ô∏è –ú–æ–¥–µ–ª—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
    bot.send_chat_action(message.chat.id, 'typing')
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª—å—é
        raw_answer = generate_response(question, TOKENIZER, MODEL, DEVICE)
        
        # –ó–∞–º–µ–Ω—è–µ–º —à–∞–±–ª–æ–Ω—ã
        final_answer = replace_shablons(raw_answer, SHABLONS)
        
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π –ø–æ—Å–ª–µ –∑–∞–º–µ–Ω—ã —à–∞–±–ª–æ–Ω–æ–≤
        if not final_answer or len(final_answer) < 5:
            final_answer = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        bot.reply_to(message, final_answer)
        usage_stats["successful_responses"] += 1
        
        logger.info(f"‚úÖ –û—Ç–≤–µ—Ç –¥–ª—è {user_id}: {final_answer[:100]}...")
        
    except Exception as e:
        error_msg = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        bot.reply_to(message, error_msg)
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è {user_id}: {e}")

# ==================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ====================
if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞...")
    
    if TOKENIZER is None or MODEL is None:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å! –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.")
        exit(1)
        
    if not SHABLONS:
        logger.warning("‚ö†Ô∏è –®–∞–±–ª–æ–Ω—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –æ—Ç–≤–µ—Ç—ã –±—É–¥—É—Ç –±–µ–∑ –∑–∞–º–µ–Ω—ã!")
    
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("‚èπÔ∏è –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    try:
        bot.polling(none_stop=True, interval=0)
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")