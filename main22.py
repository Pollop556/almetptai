import os
import pandas as pd
import torch
from sentence_transformers import SentenceTransformer, util
import csv
import re
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class FAQTelegramBot:
    def __init__(self, model_dir="./model", csv_path="data_new.csv", template_path="shablon.csv"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç-–±–æ—Ç–∞ –¥–ª—è Telegram
        
        Args:
            model_dir (str): –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
            csv_path (str): –ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏-–æ—Ç–≤–µ—Ç–∞–º–∏
            template_path (str): –ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É —Å —à–∞–±–ª–æ–Ω–∞–º–∏
        """
        self.model_dir = model_dir
        self.csv_path = csv_path
        self.template_path = template_path
        self.model = None
        self.df = None
        self.templates = {}
        self.corpus_embeddings = None
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –º–æ–¥–µ–ª–∏ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs(model_dir, exist_ok=True)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–ª–∏ —Å–∫–∞—á–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å
        self.load_or_download_model()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        self.load_data()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω—ã
        self.load_templates()
        
        # –í–µ–∫—Ç–æ—Ä–∏–∑—É–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
        self.encode_corpus()
    
    def load_or_download_model(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–∞–ø–∫–∏ –∏–ª–∏ —Å–∫–∞—á–∏–≤–∞–µ—Ç –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
        model_name = 'sentence-transformers/all-MiniLM-L6-v2'
        local_model_path = os.path.join(self.model_dir, 'all-MiniLM-L6-v2')
        
        try:
            logger.info("–ü—ã—Ç–∞—é—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–∞–ø–∫–∏...")
            self.model = SentenceTransformer(local_model_path)
            logger.info("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–∞–ø–∫–∏!")
        except:
            logger.info("‚ùå –õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–∫–∞—á–∏–≤–∞—é –º–æ–¥–µ–ª—å...")
            
            try:
                # –°–∫–∞—á–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å
                self.model = SentenceTransformer(model_name)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                self.model.save(local_model_path)
                logger.info(f"‚úÖ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {local_model_path}")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {e}")
                raise
    
    def load_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV —Ñ–∞–π–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∞"""
        try:
            logger.info(f"–ü—ã—Ç–∞—é—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ {self.csv_path}...")
            
            try:
                # –°–ø–æ—Å–æ–± 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —á—Ç–µ–Ω–∏–µ
                self.df = pd.read_csv(self.csv_path, header=None, names=['question', 'answer'])
                logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º")
            except:
                # –°–ø–æ—Å–æ–± 2: –ß—Ç–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–∞–≤—ã—á–µ–∫
                self.df = pd.read_csv(
                    self.csv_path, 
                    header=None, 
                    names=['question', 'answer'],
                    quoting=csv.QUOTE_ALL,
                    escapechar='\\'
                )
                logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–∞–≤—ã—á–µ–∫")
            
            logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.df)} –≤–æ–ø—Ä–æ—Å–æ–≤-–æ—Ç–≤–µ—Ç–æ–≤")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ CSV —Ñ–∞–π–ª–∞: {e}")
            self.load_data_manual()
    
    def load_data_manual(self):
        """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —á—Ç–µ–Ω–∏—è CSV –≤—Ä—É—á–Ω—É—é"""
        try:
            data = []
            with open(self.csv_path, 'r', encoding='utf-8') as file:
                reader = csv.reader(file)
                for i, row in enumerate(reader):
                    if len(row) >= 2:
                        question = row[0].strip()
                        answer = ' '.join(row[1:]).strip()
                        data.append([question, answer])
                    else:
                        logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ {i+1}: –Ω–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π - {row}")
            
            self.df = pd.DataFrame(data, columns=['question', 'answer'])
            logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤—Ä—É—á–Ω—É—é. –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.df)} –∑–∞–ø–∏—Å–µ–π")
            
            if len(self.df) == 0:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
                
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            raise
    
    def load_templates(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —à–∞–±–ª–æ–Ω—ã –∏–∑ CSV —Ñ–∞–π–ª–∞"""
        try:
            logger.info(f"–ó–∞–≥—Ä—É–∂–∞—é —à–∞–±–ª–æ–Ω—ã –∏–∑ {self.template_path}...")
            
            with open(self.template_path, 'r', encoding='utf-8') as file:
                content = file.read().splitlines()
                
                for line in content:
                    if ',' in line:
                        parts = line.split(',', 1)
                        if len(parts) >= 2:
                            key = parts[0].strip()
                            value = parts[1].strip()
                            
                            if key.startswith('[') and key.endswith(']'):
                                key = key[1:-1]
                            
                            if value.startswith('"') and value.endswith('"'):
                                value = value[1:-1]
                            
                            self.templates[key] = value
            
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.templates)} —à–∞–±–ª–æ–Ω–æ–≤")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —à–∞–±–ª–æ–Ω–æ–≤: {e}")
    
    def replace_templates(self, text):
        """–ó–∞–º–µ–Ω—è–µ—Ç —à–∞–±–ª–æ–Ω—ã –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è"""
        if not self.templates:
            return text
        
        templates_found = re.findall(r'\[(.*?)\]', text)
        
        if not templates_found:
            return text
        
        result = text
        for template in templates_found:
            if template in self.templates:
                replacement = self.templates[template]
                result = result.replace(f"[{template}]", replacement)
                logger.debug(f"–ó–∞–º–µ–Ω–µ–Ω —à–∞–±–ª–æ–Ω '[{template}]' -> '{replacement}'")
        
        return result
    
    def encode_corpus(self):
        """–í–µ–∫—Ç–æ—Ä–∏–∑—É–µ—Ç –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        logger.info("–ö–æ–¥–∏—Ä—É—é –±–∞–∑—É –≤–æ–ø—Ä–æ—Å–æ–≤...")
        questions = self.df['question'].tolist()
        self.corpus_embeddings = self.model.encode(
            questions,
            convert_to_tensor=True,
            show_progress_bar=False,
            normalize_embeddings=True
        )
        logger.info("‚úÖ –ë–∞–∑–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∞!")
    
    def find_best_answer(self, query, top_k=1):
        """
        –ù–∞—Ö–æ–¥–∏—Ç —Å–∞–º—ã–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        """
        # –ö–æ–¥–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω–æ–π –≤–æ–ø—Ä–æ—Å
        query_embedding = self.model.encode(query, convert_to_tensor=True, normalize_embeddings=True)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ
        cos_scores = util.cos_sim(query_embedding, self.corpus_embeddings)[0]
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π –ø–æ—Ö–æ–∂–∏–π –≤–æ–ø—Ä–æ—Å
        top_score, top_idx = torch.max(cos_scores, dim=0)
        
        original_answer = self.df.iloc[top_idx.item()]['answer']
        
        # –ó–∞–º–µ–Ω—è–µ–º —à–∞–±–ª–æ–Ω—ã –≤ –æ—Ç–≤–µ—Ç–µ
        processed_answer = self.replace_templates(original_answer)
        
        result = {
            'question': self.df.iloc[top_idx.item()]['question'],
            'answer': processed_answer,
            'score': top_score.item()
        }
        
        return result

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –±–æ—Ç–∞
faq_bot = None

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FAQ –±–æ—Ç!

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –Ω–∞–π–¥—É –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π.

–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:
‚Ä¢ –ö–∞–∫ —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?
‚Ä¢ –ì–¥–µ –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã?
‚Ä¢ –ö–∞–∫ –ø–æ—Å—Ç—É–ø–∏—Ç—å –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç?
"""
    await update.message.reply_text(welcome_text)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üìñ –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:

‚Ä¢ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç
‚Ä¢ –ë–æ—Ç –Ω–∞–π–¥–µ—Ç —Å–∞–º—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–≤–µ—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
‚Ä¢ –û—Ç–≤–µ—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É—é—Ç—Å—è —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏

–ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ —Ç–æ—á–Ω—ã–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.
"""
    await update.message.reply_text(help_text)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        user_message = update.message.text
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
        
        # –ò—â–µ–º –ª—É—á—à–∏–π –æ—Ç–≤–µ—Ç
        result = faq_bot.find_best_answer(user_message)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        if result['score'] > 0.3:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            response = f"üí° {result['answer']}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –µ—Å–ª–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∏–∑–∫–∞—è
            if result['score'] < 0.5:
                response += "\n\n‚ö†Ô∏è –ï—Å–ª–∏ —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."
        else:
            response = "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await update.message.reply_text(response)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        logger.info(f"User {update.effective_user.id}: '{user_message}' -> Score: {result['score']:.4f}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
    if update and update.message:
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞"""
    global faq_bot
    
    # –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à)
    BOT_TOKEN = "8450391232:AAGtconwAu_Lig4gre6k05NJgXWukh6NIHU"
    
    if BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
        print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π BOT_TOKEN")
        return
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º FAQ –±–æ—Ç–∞
        print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FAQ –±–æ—Ç–∞...")
        faq_bot = FAQTelegramBot(
            model_dir="./faq_model",
            csv_path="data_new.csv",
            template_path="shablon.csv"
        )
        print("‚úÖ FAQ –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        application.add_error_handler(error_handler)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        print("ü§ñ –ó–∞–ø—É—Å–∫–∞—é Telegram –±–æ—Ç–∞...")
        application.run_polling(allowed_updates=Update.ALL_TYPES)
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    main()